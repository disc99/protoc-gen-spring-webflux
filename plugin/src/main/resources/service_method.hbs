@Nonnull
public Mono<ServerResponse> {{restMethodName}}(ServerRequest serverRequest) {
    try {
        return {{prepareInput}}
                .flatMap(request -> {
                    ReactiveStreamObserver<{{resultProto}}> observer = new ReactiveStreamObserver<>();
                    stub.{{methodName}}(request, observer);
                    return Mono.from(observer);
                })
                .flatMap(res -> ServerResponse.ok()
                        .contentType(MediaType.APPLICATION_JSON)
                        .syncBody({{resultType}}.fromProto(res)));
    } catch (Exception e) {
        throw Exceptions.propagate(e);
    }
}

@Nonnull
public RouterFunction<ServerResponse> {{restMethodName}}RouterFunction() {
    return RouterFunctions.route().{{methodTypeName}}("{{path}}", this::{{restMethodName}}).build();
}
