// Generated by the {{pluginName}} compiler plugin.  DO NOT EDIT!
// source: {{protoSourceName}}
package {{pkgName}};

{{imports}}

@javax.annotation.Generated(
        value = "by {{pluginName}} compiler plugin",
        comments = "Source: {{protoSourceName}}")
public final class {{outerClassName}} {

    private {{outerClassName}}() {}

    public interface {{serviceClassName}} {
        @javax.annotation.Nonnull
        default public RouterFunction<ServerResponse> allRoutes() {
                return RouterFunctions.route()
                    {{#methods}}
                    .{{methodTypeName}}("{{path}}", this::{{restMethodName}})
                    {{/methods}}
                    .build();
        }

        {{#methods}}
        @javax.annotation.Nonnull
        default public Mono<ServerResponse> {{restMethodName}}(ServerRequest serverRequest) {
            return ServerResponse.status(HttpStatus.NOT_IMPLEMENTED).build();
        }
        {{/methods}}
    }

    public static {{outerClassName}}.{{serviceGrpcProxyClassName}}.Builder newGrpcProxyBuilder() {
      return new {{outerClassName}}.{{serviceGrpcProxyClassName}}.Builder();
    }

    public static final class {{serviceGrpcProxyClassName}} implements {{serviceClassName}} {

        private {{package}}.{{serviceName}}Grpc.{{serviceName}}Stub stub;
        private List<String> includeHeaders;
        private JsonFormat.Parser jsonParser;
        private JsonFormat.Printer jsonPrinter;

        @javax.annotation.Nonnull
        @java.lang.Override
        public RouterFunction<ServerResponse> allRoutes() {
                return RouterFunctions.route()
                    {{#methods}}
                    .{{methodTypeName}}("{{path}}", this::{{restMethodName}})
                    {{/methods}}
                    .build();
        }

        {{#methods}}
        @javax.annotation.Nonnull
        @java.lang.Override
        public Mono<ServerResponse> {{restMethodName}}(ServerRequest serverRequest) {
            try {
                {{#with requestContext}}
                return Mono.just({{requestType}}.newBuilder())
                        {{#with body}}
                        .flatMap(inputBuilder -> {
                            return serverRequest
                                .bodyToMono(DataBuffer.class)
                                .map(dataBuffer -> {
                                    {{#if wildcard}}
                                        mergeJson(dataBuffer, inputBuilder);
                                    {{else}}
                                        {{type}}.Builder builder = {{type}}.newBuilder();
                                        mergeJson(dataBuffer, builder);
                                        inputBuilder{{setterName}}(builder.build());
                                    {{/if}}
                                    return inputBuilder;
                                });
                        })
                        {{/with}}
                        {{#parameters}}
                        .map(inputBuilder -> {
                            List<{{type}}> {{variable}} = param(serverRequest, "{{variable}}", p -> {{convert}});
                            {{#if isRepeated}}
                                inputBuilder{{setterName}}({{variable}});
                            {{else}}
                                {{variable}}.stream().findFirst()
                                    .ifPresent(p -> inputBuilder{{setterName}}(p));
                            {{/if}}
                            return inputBuilder;
                        })
                        {{/parameters}}
                        {{#paths}}
                        .map(inputBuilder -> {
                            {{type}} {{variable}} = query(serverRequest, "{{variable}}", p -> {{convert}});
                            inputBuilder{{setterName}}({{variable}});
                            return inputBuilder;
                        })
                        {{/paths}}
                        .map({{requestType}}.Builder::build)
                {{/with}}
                        .flatMap(request -> {
                            ReactiveStreamObserver<{{resultProto}}> observer = new ReactiveStreamObserver<>();
                            Metadata metadata = extractMetadata(serverRequest.headers());
                            MetadataUtils.attachHeaders(stub, metadata).{{methodName}}(request, observer);
                            return Mono.from(observer);
                        })
                        .flatMap(res -> ServerResponse.ok()
                                .contentType(MediaType.APPLICATION_JSON)
                                .bodyValue(printJson(res.toBuilder())));
            } catch (Exception e) {
                return Mono.error(e);
            }
        }
        {{/methods}}

        @javax.annotation.Nonnull
        private <T> T query(ServerRequest serverRequest, String target, Convert<T> convert) {
            try {
              return convert.apply(serverRequest.pathVariable(target));
            } catch (Exception e) {
              throw new ServerWebInputException(e.getMessage());
            }
        }

        @javax.annotation.Nonnull
        private <T> List<T> param(ServerRequest serverRequest, String param, Convert<T> converter) {
            List<String> params = serverRequest.queryParams().get(param);
            if (params == null) {
                return Collections.emptyList();
            }
            return params.stream()
                    .filter(p -> !Strings.isNullOrEmpty(p))
                    .map(p -> {
                        try {
                            return converter.apply(p);
                        } catch (Exception e) {
                            throw new ServerWebInputException(e.getMessage());
                        }
                    }).collect(Collectors.toList());
        }

        private void mergeJson(DataBuffer dataBuffer, Message.Builder builder)  {
          try {
              jsonParser.merge(
                      new InputStreamReader(dataBuffer.asInputStream()), builder);
          } catch (IOException e) {
              throw new ServerWebInputException(e.getMessage());
          }
        }

        private String printJson(MessageOrBuilder message) {
          try {
              return jsonPrinter.print(message);
          } catch (InvalidProtocolBufferException e) {
              throw new IllegalArgumentException(e);
          }
        }

        private Metadata extractMetadata(ServerRequest.Headers headers) {
          Metadata metadata = new Metadata();
          if (Objects.nonNull(includeHeaders)) {
              headers.asHttpHeaders().entrySet()
                      .forEach(entity -> {
                          if (includeHeaders.stream()
                                  .anyMatch(header -> header.equalsIgnoreCase(entity.getKey()))) {
                              metadata.put(Metadata.Key.of(entity.getKey(), Metadata.ASCII_STRING_MARSHALLER),
                                      entity.getValue().get(0));
                          }
                      });
          }
          return metadata;
        }

        public static final class Builder {
          private {{package}}.{{serviceName}}Grpc.{{serviceName}}Stub stub;
          private List<String> includeHeaders;
          private JsonFormat.Parser jsonParser = JsonFormat.parser().ignoringUnknownFields();
          private JsonFormat.Printer jsonPrinter = JsonFormat.printer().includingDefaultValueFields();

          public {{serviceGrpcProxyClassName}} build() {
            {{serviceGrpcProxyClassName}} handler = new {{serviceGrpcProxyClassName}}();
            handler.stub = this.stub;
            handler.includeHeaders = this.includeHeaders;
            handler.jsonParser = jsonParser;
            handler.jsonPrinter = jsonPrinter;
            return handler;
          }

          public Builder setStub({{package}}.{{serviceName}}Grpc.{{serviceName}}Stub stub) {
            this.stub = stub;
            return this;
          }

          public Builder setIncludeHeaders(List<String> includeHeaders) {
            this.includeHeaders = includeHeaders;
            return this;
          }

          public Builder setJsonParser(JsonFormat.Parser jsonParser) {
            this.jsonParser = jsonParser;
            return this;
          }

          public Builder setJsonPrinter(JsonFormat.Printer jsonPrinter) {
            this.jsonPrinter = jsonPrinter;
            return this;
          }
        }

        private interface Convert<R> {
            R apply(String target) throws Exception;
        }

        private static class ReactiveStreamObserver<T> implements StreamObserver<T>, Publisher<T> {
            Subscriber<? super T> subscriber;

            @java.lang.Override
            public void onNext(T value) {
                subscriber.onNext(value);
            }

            @java.lang.Override
            public void onError(Throwable t) {
                subscriber.onError(t);
            }

            @java.lang.Override
            public void onCompleted() {
                subscriber.onComplete();
            }

            @java.lang.Override
            public void subscribe(Subscriber<? super T> s) {
                this.subscriber = s;
                this.subscriber.onSubscribe(new BaseSubscriber<T>() {});
            }
        }
    }
}
