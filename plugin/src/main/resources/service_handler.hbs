public static class {{serviceName}}Handler {

    private {{package}}.{{serviceName}}Grpc.{{serviceName}}Stub stub;
    private List<String> includeHeaders;
    private JsonFormat.Parser jsonParser;
    private JsonFormat.Printer jsonPrinter;

    public static final class Builder {
      private {{package}}.{{serviceName}}Grpc.{{serviceName}}Stub stub;
      private List<String> includeHeaders;
      private JsonFormat.Parser jsonParser = JsonFormat.parser().ignoringUnknownFields();
      private JsonFormat.Printer jsonPrinter = JsonFormat.printer().includingDefaultValueFields();

      public {{serviceName}}Handler build() {
        {{serviceName}}Handler handler = new {{serviceName}}Handler();
        handler.stub = this.stub;
        handler.includeHeaders = this.includeHeaders;
        handler.jsonParser = jsonParser;
        handler.jsonPrinter = jsonPrinter;
        return handler;
      }

      public Builder setStub({{package}}.{{serviceName}}Grpc.{{serviceName}}Stub stub) {
        this.stub = stub;
        return this;
      }

      public Builder setIncludeHeaders(List<String> includeHeaders) {
        this.includeHeaders = includeHeaders;
        return this;
      }

      public Builder setJsonParser(JsonFormat.Parser jsonParser) {
        this.jsonParser = jsonParser;
        return this;
      }

      public Builder setJsonPrinter(JsonFormat.Printer jsonPrinter) {
        this.jsonPrinter = jsonPrinter;
        return this;
      }
    }

    public {{serviceName}}Handler() {
      this.stub = stub;
    }

    public static {{serviceName}}Handler.Builder newBuilder() {
      return new Builder();
    }

    @Nonnull
    public RouterFunction<ServerResponse> allRoutes() {
            return RouterFunctions.route()
                {{#methods}}
                .{{methodTypeName}}("{{path}}", this::{{restMethodName}})
                {{/methods}}
                .build();
    }

    @Nonnull
    public static {{serviceName}}RouterBuilder builder() {
        return new {{serviceName}}RouterBuilder();
    }

    {{#methods}}
    @Nonnull
    public Mono<ServerResponse> {{restMethodName}}(ServerRequest serverRequest) {
        try {
            {{#with requestContext}}
            return Mono.just({{requestType}}.newBuilder())
                    {{#with body}}
                    .flatMap(inputBuilder -> {
                        return serverRequest
                            .bodyToMono(DataBuffer.class)
                            .map(dataBuffer -> {
                                {{#if wildcard}}
                                    mergeJson(dataBuffer, inputBuilder);
                                {{else}}
                                    {{type}}.Builder builder = {{type}}.newBuilder();
                                    mergeJson(dataBuffer, builder);
                                    inputBuilder{{setterName}}(builder.build());
                                {{/if}}
                                return inputBuilder;
                            });
                    })
                    {{/with}}
                    {{#parameters}}
                    .map(inputBuilder -> {
                        List<{{type}}> {{variable}} = param(serverRequest, "{{variable}}", p -> {{convert}});
                        {{#if isRepeated}}
                            inputBuilder{{setterName}}({{variable}});
                        {{else}}
                            {{variable}}.stream().findFirst()
                                .ifPresent(p -> inputBuilder{{setterName}}(p));
                        {{/if}}
                        return inputBuilder;
                    })
                    {{/parameters}}
                    {{#paths}}
                    .map(inputBuilder -> {
                        {{type}} {{variable}} = query(serverRequest, "{{variable}}", p -> {{convert}});
                        inputBuilder{{setterName}}({{variable}});
                        return inputBuilder;
                    })
                    {{/paths}}
                    .map({{requestType}}.Builder::build)
            {{/with}}
                    .flatMap(request -> {
                        ReactiveStreamObserver<{{resultProto}}> observer = new ReactiveStreamObserver<>();
                        Metadata metadata = extractMetadata(serverRequest.headers());
                        MetadataUtils.attachHeaders(stub, metadata).{{methodName}}(request, observer);
                        return Mono.from(observer);
                    })
                    .flatMap(res -> ServerResponse.ok()
                            .contentType(MediaType.APPLICATION_JSON)
                            .syncBody(printJson(res.toBuilder())));
        } catch (Exception e) {
            return Mono.error(e);
        }
    }
    {{/methods}}

    @Nonnull
    private <T> T query(ServerRequest serverRequest, String target, Convert<T> convert) {
        try {
          return convert.apply(serverRequest.pathVariable(target));
        } catch (Exception e) {
          throw new ServerWebInputException(e.getMessage());
        }
    }

    @Nonnull
    private <T> List<T> param(ServerRequest serverRequest, String param, Convert<T> converter) {
        List<String> params = serverRequest.queryParams().get(param);
        if (params == null) {
            return Collections.emptyList();
        }
        return params.stream()
                .filter(p -> !Strings.isNullOrEmpty(p))
                .map(p -> {
                    try {
                        return converter.apply(p);
                    } catch (Exception e) {
                        throw new ServerWebInputException(e.getMessage());
                    }
                }).collect(Collectors.toList());
    }

    private void mergeJson(DataBuffer dataBuffer, Message.Builder builder)  {
      try {
          jsonParser.merge(
                  new InputStreamReader(dataBuffer.asInputStream()), builder);
      } catch (IOException e) {
          throw new ServerWebInputException(e.getMessage());
      }
    }

    private String printJson(MessageOrBuilder message) {
      try {
          return jsonPrinter.print(message);
      } catch (InvalidProtocolBufferException e) {
          throw new IllegalArgumentException(e);
      }
    }

    private Metadata extractMetadata(ServerRequest.Headers headers) {
      Metadata metadata = new Metadata();
      if (Objects.nonNull(includeHeaders)) {
          headers.asHttpHeaders().entrySet()
                  .forEach(entity -> {
                      if (includeHeaders.stream()
                              .anyMatch(header -> header.equalsIgnoreCase(entity.getKey()))) {
                          metadata.put(Metadata.Key.of(entity.getKey(), Metadata.ASCII_STRING_MARSHALLER),
                                  entity.getValue().get(0));
                      }
                  });
      }
      return metadata;
    }

    private interface Convert<R> {
        R apply(String target) throws Exception;
    }

    public static class {{serviceName}}RouterBuilder {

        {{#methods}}
        private HandlerFunction<ServerResponse> {{restMethodName}}Function;
        {{/methods}}

        {{#methods}}
        public {{serviceName}}RouterBuilder {{restMethodName}}(HandlerFunction<ServerResponse> {{restMethodName}}Function){
            this.{{restMethodName}}Function = {{restMethodName}}Function;
            return this;
        }
        {{/methods}}

        @Nonnull
        public RouterFunctions.Builder and() {
            RouterFunctions.Builder builder = RouterFunctions.route();
            {{#methods}}
            if ({{restMethodName}}Function != null) {
                builder.{{methodTypeName}}("{{path}}", {{restMethodName}}Function);
            }
            {{/methods}}
            return builder;
        }

        @Nonnull
        public RouterFunction<ServerResponse> build() {
            return and().build();
        }
    }
}
