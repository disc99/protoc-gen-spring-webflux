public static class {{serviceName}}Handler {

    private {{package}}.{{serviceName}}Grpc.{{serviceName}}Stub stub;
    private List<String> includeHeaders;

    public static final class Builder {
      private {{package}}.{{serviceName}}Grpc.{{serviceName}}Stub stub;
      private List<String> includeHeaders;

      public {{serviceName}}Handler build() {
        {{serviceName}}Handler handler = new {{serviceName}}Handler();
        handler.stub = this.stub;
        handler.includeHeaders = this.includeHeaders;
        return handler;
      }

      public Builder setStub({{package}}.{{serviceName}}Grpc.{{serviceName}}Stub stub) {
        this.stub = stub;
        return this;
      }

      public Builder setIncludeHeaders(List<String> includeHeaders) {
        this.includeHeaders = includeHeaders;
        return this;
      }
    }

    public {{serviceName}}Handler() {
      this.stub = stub;
    }

    public static {{serviceName}}Handler.Builder newBuilder() {
      return new Builder();
    }

    @Nonnull
    public RouterFunction<ServerResponse> allRoutes() {
            return RouterFunctions.route()
                {{#methods}}
                .{{methodTypeName}}("{{path}}", this::{{restMethodName}})
                {{/methods}}
                .build();
    }

    @Nonnull
    public static {{serviceName}}RouterBuilder builder() {
        return new {{serviceName}}RouterBuilder();
    }

    {{#methods}}
    @Nonnull
    public Mono<ServerResponse> {{restMethodName}}(ServerRequest serverRequest) {
        try {
            return {{prepareInput}}
                    .flatMap(request -> {
                        ReactiveStreamObserver<{{resultProto}}> observer = new ReactiveStreamObserver<>();
                        Metadata metadata = new Metadata();
                        if (Objects.nonNull(includeHeaders)) {
                            serverRequest.headers().asHttpHeaders().entrySet()
                                .forEach(entity -> {
                                    if (includeHeaders.contains(entity.getKey())) {
                                        metadata.put(Metadata.Key.of(entity.getKey(), Metadata.ASCII_STRING_MARSHALLER), entity.getValue().get(0));
                                    }
                                });
                        }
                        MetadataUtils.attachHeaders(stub, metadata).{{methodName}}(request, observer);
                        return Mono.from(observer);
                    })
                    .flatMap(res -> ServerResponse.ok()
                            .contentType(MediaType.APPLICATION_JSON)
                            .syncBody({{resultType}}.fromProto(res)));
        } catch (Exception e) {
            return Mono.error(e);
        }
    }
    {{/methods}}

    public static class {{serviceName}}RouterBuilder {

        {{#methods}}
        private HandlerFunction<ServerResponse> {{restMethodName}}Function;
        {{/methods}}

        {{#methods}}
        public {{serviceName}}RouterBuilder {{restMethodName}}(HandlerFunction<ServerResponse> {{restMethodName}}Function){
            this.{{restMethodName}}Function = {{restMethodName}}Function;
            return this;
        }
        {{/methods}}

        @Nonnull
        public RouterFunctions.Builder and() {
            RouterFunctions.Builder builder = RouterFunctions.route();
            {{#methods}}
            if ({{restMethodName}}Function != null) {
                builder.{{methodTypeName}}("{{path}}", {{restMethodName}}Function);
            }
            {{/methods}}
            return builder;
        }

        @Nonnull
        public RouterFunction<ServerResponse> build() {
            return and().build();
        }
    }
}
