public static class {{serviceName}}Handler {

    {{package}}.{{serviceName}}Grpc.{{serviceName}}BlockingStub stub;

    public {{serviceName}}Handler({{package}}.{{serviceName}}Grpc.{{serviceName}}BlockingStub stub) {
        this.stub = stub;
    }

    public Mono<ServerResponse> handleAll(ServerRequest serverRequest) {
        switch (serverRequest.path()) {
            {{#methods}}
            case "/{{packageProto}}.{{serviceName}}/{{methodProto}}":
                return {{methodName}}(serverRequest);
            {{/methods}}
        }
        throw new ResponseStatusException(HttpStatus.NOT_FOUND);
    }

    {{#methods}}
    public Mono<ServerResponse> {{methodName}}(ServerRequest serverRequest) {
        return serverRequest.bodyToMono(String.class)
                .flatMap(json -> {
                    try {
                        {{requestProto}}.Builder builder = {{requestProto}}.newBuilder();
                        JsonFormat.parser().merge(json, builder);
                        {{resultProto}} res = stub.{{methodName}}(builder.build());
                        return ServerResponse.ok()
                                .contentType(MediaType.APPLICATION_JSON)
                                .syncBody(JsonFormat.printer().print(res));
                    } catch (InvalidProtocolBufferException e) {
                        throw Exceptions.propagate(e);
                    }
                });
    }
    {{/methods}}
}
